{"version":3,"sources":["Component/AboutUs.js","Component/Navbar.js","Component/TextForm.js","Component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["AboutUs","myStyle","setMyStyle","useState","color","backgroundColor","btnText","setbtnText","console","log","React","createElement","Fragment","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","toggleStyle","Navbar","props","concat","mode","Link","to","title","aria-label","aria-current","aboutText","role","placeholder","toggleMode","htmlFor","currMode","TextForm","text","setText","wordCount","trim","split","filter","Boolean","length","minHeight","padding","heading","onChange","event","target","value","rows","borderColor","handleUpClick","toUpperCase","showAlert","disabled","handleLowerClick","toLowerCase","handleClearClick","Alert","alert","str","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setCurrMode","setAlert","activeTab","setActiveTab","message","setTimeout","onNavigate","document","renderTab","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","BrowserRouter"],"mappings":"8MACe,SAASA,IACtB,MAAOC,EAAQC,GAAcC,mBAAS,CACpCC,MAAQ,QACRC,gBAAkB,WAEbC,EAAQC,GAAcJ,mBAAS,oBACtCK,QAAQC,IAAIH,GAiBZ,OACEI,IAAAC,cAAAD,IAAAE,SAAA,KACAF,IAAAC,cAAA,OAAKE,UAAU,aAAaC,MAAOb,GACjCS,IAAAC,cAAA,MAAIE,UAAU,QAAQH,IAAAC,cAAA,cAAQ,aAC9BD,IAAAC,cAAA,OAAKE,UAAU,4BAA4BE,GAAG,yBAC5CL,IAAAC,cAAA,OAAKE,UAAU,kBACbH,IAAAC,cAAA,MAAIE,UAAU,oBACZH,IAAAC,cAAA,UACEE,UAAU,6BACVG,KAAK,SACLC,iBAAe,WACfC,iBAAe,qBACfC,gBAAc,QACdC,gBAAc,oBACdN,MAAOb,GACN,sBAILS,IAAAC,cAAA,OACEI,GAAG,oBACHF,UAAU,8BACVQ,iBAAe,0BAEfX,IAAAC,cAAA,OAAKE,UAAU,kBAAiB,gFAEdH,IAAAC,cAAA,YAAM,oBAAuB,sDAKnDD,IAAAC,cAAA,OAAKE,UAAU,iBAAiBC,MAAOb,GACrCS,IAAAC,cAAA,MAAIE,UAAU,oBACZH,IAAAC,cAAA,UACEE,UAAU,6BACVG,KAAK,SACLC,iBAAe,WACfC,iBAAe,qBACfC,gBAAc,QACdC,gBAAc,oBACdN,MAAOb,GAEN,sBAILS,IAAAC,cAAA,OACEI,GAAG,oBACHF,UAAU,8BACVQ,iBAAe,0BAGfX,IAAAC,cAAA,OAAKE,UAAU,kBAAiB,gFAEdH,IAAAC,cAAA,YAAM,oBAAuB,iHAMnDD,IAAAC,cAAA,OAAKE,UAAU,kBACbH,IAAAC,cAAA,MAAIE,UAAU,oBACZH,IAAAC,cAAA,UACEE,UAAU,6BACVG,KAAK,SACLC,iBAAe,WACfC,iBAAe,uBACfC,gBAAc,QACdC,gBAAc,sBACdN,MAAOb,GACN,sBAILS,IAAAC,cAAA,OACEI,GAAG,sBACHF,UAAU,8BACVQ,iBAAe,0BAEfX,IAAAC,cAAA,OAAKE,UAAU,kBAAiB,gFAEdH,IAAAC,cAAA,YAAM,oBAAuB,yQAUvDD,IAAAC,cAAA,OAAKE,UAAU,kBACfH,IAAAC,cAAA,UAAQE,UAAU,kBAAkBS,QA5GlBC,KACG,UAAlBtB,EAAQG,OACTF,EAAW,CACTE,MAAQ,QACRC,gBAAkB,UAEpBE,EAAW,sBAEXL,EAAW,CACTE,MAAQ,QACRC,gBAAkB,UAEpBE,EAAW,wBAgG6C,sB,WChH/C,SAASiB,EAAOC,GAC7B,OACEf,IAAAC,cAAA,OAAKE,UAAS,kCAAAa,OAAoCD,EAAME,KAAI,QAAAD,OAAOD,EAAME,OACvEjB,IAAAC,cAAA,OAAKE,UAAU,mBACbH,IAAAC,cAACiB,IAAI,CAACf,UAAU,eAAegB,GAAG,KAAKJ,EAAMK,OAC7CpB,IAAAC,cAAA,UACEE,UAAU,iBACVG,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfE,gBAAc,yBACdD,gBAAc,QACdY,aAAW,qBAEXrB,IAAAC,cAAA,QAAME,UAAU,yBAElBH,IAAAC,cAAA,OAAKE,UAAU,2BAA2BE,GAAG,0BAC3CL,IAAAC,cAAA,MAAIE,UAAU,mCACZH,IAAAC,cAAA,MAAIE,UAAU,YACZH,IAAAC,cAACiB,IAAI,CAACf,UAAU,kBAAkBmB,eAAa,OAAOH,GAAG,aAAY,SAEvEnB,IAAAC,cAAA,MAAIE,UAAU,YACZH,IAAAC,cAACiB,IAAI,CAACf,UAAU,WAAWgB,GAAG,UAAUJ,EAAMQ,YAEhDvB,IAAAC,cAAA,MAAIE,UAAU,YACZH,IAAAC,cAACiB,IAAI,CAACf,UAAU,WAAWgB,GAAG,YAAW,cAG7CnB,IAAAC,cAAA,QAAME,UAAU,SAASqB,KAAK,UAC5BxB,IAAAC,cAAA,SACEE,UAAU,oBACVG,KAAK,SACLmB,YAAY,SACZJ,aAAW,WAEbrB,IAAAC,cAAA,UAAQE,UAAU,0BAA0BG,KAAK,UAAS,aAIhEN,IAAAC,cAAA,OAAKE,UAAU,0BACbH,IAAAC,cAAA,SACEE,UAAU,mBACVG,KAAK,WACLkB,KAAK,SACLZ,QAASG,EAAMW,WACfrB,GAAG,2BAELL,IAAAC,cAAA,SACEE,UAAU,mBACVwB,QAAQ,yBACRvB,MAAO,CAAEV,MAAsB,UAAfqB,EAAME,KAAmB,QAAU,UAElDF,EAAMa,YCrDF,SAASC,EAASd,GAC/B,MAAOe,EAAMC,GAAWtC,mBAAS,IAqB3BuC,EAAYF,EAAKG,OAAOC,MAAM,OAAOC,OAAOC,SAASC,OAE3D,OACErC,IAAAC,cAAA,OAAKE,UAAS,MAAAa,OAAQD,EAAME,MAAQb,MAAO,CAAEkC,UAAW,QAASC,QAAS,SACxEvC,IAAAC,cAAA,OAAKE,UAAU,aACbH,IAAAC,cAAA,MAAIE,UAAU,OAAOC,MAAO,CAAEV,MAAsB,UAAfqB,EAAME,KAAmB,QAAU,UACrEF,EAAMyB,SAETxC,IAAAC,cAAA,OAAKE,UAAU,QACbH,IAAAC,cAAA,YACEE,UAAU,eACVsC,SAzBcC,IACtBX,EAAQW,EAAMC,OAAOC,QAyBbvC,GAAG,8BACHwC,KAAK,IACLD,MAAOd,EACP1B,MAAO,CACLT,gBAAgC,UAAfoB,EAAME,KAAmB,QAAU,QACpDvB,MAAsB,UAAfqB,EAAME,KAAmB,QAAU,QAC1C6B,YAA4B,UAAf/B,EAAME,KAAmB,QAAU,YAItDjB,IAAAC,cAAA,UAAQE,UAAU,4BAA4BS,QAzC9BmC,KACpBhB,EAAQD,EAAKkB,eACbjC,EAAMkC,UAAU,8BAA+B,YAuC2BC,SAA0B,KAAhBpB,EAAKG,QAAe,wBAGpGjC,IAAAC,cAAA,UAAQE,UAAU,4BAA4BS,QAnC3BuC,KACvBpB,EAAQD,EAAKsB,eACbrC,EAAMkC,UAAU,8BAA+B,YAiC8BC,SAA0B,KAAhBpB,EAAKG,QAAe,wBAGvGjC,IAAAC,cAAA,UAAQE,UAAU,4BAA4BS,QAjC3ByC,KACvBtB,EAAQ,IACRhB,EAAMkC,UAAU,wBAAyB,WA+BoCC,SAA0B,KAAhBpB,EAAKG,QAAe,eAIzGjC,IAAAC,cAAA,OAAKE,UAAU,YAAYC,MAAO,CAAEV,MAAsB,UAAfqB,EAAME,KAAmB,QAAU,UAC5EjB,IAAAC,cAAA,MAAIE,UAAU,QAAOH,IAAAC,cAAA,cAAQ,sBAC7BD,IAAAC,cAAA,SAAI+B,EAAU,cAAYF,EAAKO,OAAO,eACtCrC,IAAAC,cAAA,SAAI,KAAQ+B,EAAU,8BACtBhC,IAAAC,cAAA,MAAIE,UAAU,QAAOH,IAAAC,cAAA,cAAQ,YAC7BD,IAAAC,cAAA,SAAI6B,EAAKO,OAAS,EAAIP,EAAO,wBC3DtB,SAASwB,EAAMvC,GAK5B,OAEEA,EAAMwC,OACNvD,IAAAC,cAAA,OAAKE,UAAS,eAAAa,OAAiBD,EAAMwC,MAAMjD,KAAI,gCAAgCkB,KAAK,SACnFxB,IAAAC,cAAA,cARgBuD,KACjB,MAAMC,EAAQD,EAAIJ,cAClB,OAAOK,EAAMC,OAAO,GAAGV,cAAcS,EAAME,MAAM,IAMvCC,CAAW7C,EAAMwC,MAAMjD,OAAe,MAAIS,EAAMwC,MAAMM,KF2DpE/C,EAAOgD,aAAe,CACpB1C,MAAO,iBACPG,UAAW,yBCCbM,EAASiC,aAAe,CACtBtB,QAAS,iBERIuB,MA5Df,WACE,MAAO9C,EAAM+C,GAAWvE,mBAAS,UAC1BmC,EAAUqC,GAAexE,mBAAS,qBAClC8D,EAAOW,GAAYzE,mBAAS,OAC5B0E,EAAWC,GAAgB3E,mBAAS,aAErCwD,EAAYA,CAACoB,EAAS/D,KAC1B4D,EAAS,CACPL,IAAKQ,EACL/D,KAAMA,IAGRgE,WAAW,KACTJ,EAAS,OACR,OA4BL,OACElE,IAAAC,cAAAD,IAAAE,SAAA,KACEF,IAAAC,cAACa,EAAM,CACLM,MAAM,YACNG,UAAU,oBACVgD,WAAYH,EACZnD,KAAMA,EACNS,WAhCaA,KACJ,UAATT,GACF+C,EAAQ,QACRC,EAAY,qBACZhB,EAAU,8BAA+B,WACzCuB,SAASpD,MAAQ,yBAEjB4C,EAAQ,SACRC,EAAY,oBACZhB,EAAU,+BAAgC,WAC1CuB,SAASpD,MAAQ,0BAuBfQ,SAAUA,IAEZ5B,IAAAC,cAACqD,EAAK,CAACC,MAAOA,IACdvD,IAAAC,cAAA,OAAKE,UAAU,kBAtBDsE,MAChB,OAAQN,GACN,IAAK,YACH,OAAOnE,IAAAC,cAAC4B,EAAQ,CAACT,MAAM,wBAAwBoB,QAAQ,wBAAwBvB,KAAMA,EAAMgC,UAAWA,IACxG,IAAK,UACH,OAAOjD,IAAAC,cAACX,EAAO,MACjB,QACE,OAAO,OAgBNmF,MCjDMC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWb,SAASc,eAAe,SACpDC,OAIHvF,IAAAC,cAACuF,IAAa,KACdxF,IAAAC,cAAC8D,EAAG,QAmBNW,K","file":"static/js/main.668dc627.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nexport default function AboutUs() {\r\n  const [myStyle,setMyStyle] = useState({\r\n    color : 'white',\r\n    backgroundColor : 'black'\r\n  })\r\n  const [btnText,setbtnText] = useState(\"Enable Dark Mode\");\r\n  console.log(btnText);\r\n  const toggleStyle = () =>{\r\n    if(myStyle.color === 'white'){\r\n      setMyStyle({\r\n        color : 'black',\r\n        backgroundColor : 'white'\r\n      })\r\n      setbtnText(\"Enable Dark Mode\");\r\n    }else{\r\n      setMyStyle({\r\n        color : 'white',\r\n        backgroundColor : 'black'\r\n      })\r\n      setbtnText(\"Enable Light Mode\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container \" style={myStyle}>\r\n      <h2 className=\"my-3\" ><strong>About Us</strong></h2>\r\n      <div className=\"accordion accordion-flush\" id=\"accordionFlushExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#flush-collapseOne\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"flush-collapseOne\"\r\n              style={myStyle}\r\n              >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"flush-collapseOne\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionFlushExample\"\r\n            >\r\n            <div className=\"accordion-body\">\r\n              Placeholder content for this accordion, which is intended to\r\n              demonstrate the <code>.accordion-flush</code> class. This is the\r\n              first item's accordion body.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#flush-collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"flush-collapseTwo\"\r\n              style={myStyle}\r\n             \r\n              >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"flush-collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionFlushExample\"\r\n            // style={myStyle}\r\n            >\r\n            <div className=\"accordion-body\">\r\n              Placeholder content for this accordion, which is intended to\r\n              demonstrate the <code>.accordion-flush</code> class. This is the\r\n              second item's accordion body. Let's imagine this being filled with\r\n              some actual content.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#flush-collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"flush-collapseThree\"\r\n              style={myStyle}\r\n              >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"flush-collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionFlushExample\"\r\n            >\r\n            <div className=\"accordion-body\">\r\n              Placeholder content for this accordion, which is intended to\r\n              demonstrate the <code>.accordion-flush</code> class. This is the\r\n              third item's accordion body. Nothing more exciting happening here\r\n              in terms of content, but just filling up the space to make it\r\n              look, at least at first glance, a bit more representative of how\r\n              this would look in a real-world application.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>     \r\n    </div>\r\n    <div className=\"container my-3\">\r\n    <button className=\"btn btn-primary\" onClick={toggleStyle}>Enable Dark Mode</button>\r\n    </div>\r\n </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/TextForm\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/aboutUs\">About Us</Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-check form-switch\">\r\n        <input\r\n          className=\"form-check-input\"\r\n          type=\"checkbox\"\r\n          role=\"switch\"\r\n          onClick={props.toggleMode}\r\n          id=\"flexSwitchCheckDefault\"\r\n        />\r\n        <label\r\n          className=\"form-check-label\"\r\n          htmlFor=\"flexSwitchCheckDefault\"\r\n          style={{ color: props.mode === 'light' ? 'black' : 'white' }}\r\n        >\r\n          {props.currMode}\r\n        </label>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n  mode: PropTypes.string.isRequired,\r\n  toggleMode: PropTypes.func.isRequired,\r\n  currMode: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  aboutText: \"Explore more about us\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpClick = () => {\r\n    setText(text.toUpperCase());\r\n    props.showAlert(\"Data converted to UpperCase\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleLowerClick = () => {\r\n    setText(text.toLowerCase());\r\n    props.showAlert(\"Data converted to LowerCase\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Data has been cleared\", \"danger\");\r\n  };\r\n\r\n  const wordCount = text.trim().split(/\\s+/).filter(Boolean).length;\r\n\r\n  return (\r\n    <div className={`bg-${props.mode}`} style={{ minHeight: \"100vh\", padding: \"20px\" }}>\r\n      <div className=\"container\">\r\n        <h2 className=\"my-3\" style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n          {props.heading}\r\n        </h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            onChange={handleOnChange}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"\r\n            value={text}\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"black\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n              borderColor: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick} disabled={text.trim() === \"\"}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-warning mx-2 my-2\" onClick={handleLowerClick} disabled={text.trim() === \"\"}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick} disabled={text.trim() === \"\"}>\r\n          Clear Data\r\n        </button>\r\n      </div>\r\n      <div className=\"container\" style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n        <h2 className=\"my-3\"><strong>Your Text Summary</strong></h2>\r\n        <p>{wordCount} words and {text.length} characters</p>\r\n        <p>{0.008 * wordCount} Minutes required to read.</p>\r\n        <h2 className=\"my-3\"><strong>Preview</strong></h2>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview\"}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = {\r\n  heading: PropTypes.string.isRequired,\r\n  mode: PropTypes.string.isRequired,\r\n  showAlert: PropTypes.func.isRequired,\r\n};\r\n\r\nTextForm.defaultProps = {\r\n  heading: \"Text Analyzer\",\r\n};\r\n","import React from \"react\";\r\n// import React, { useState } from 'react';\r\n// import React, {PropTypes} from 'react';\r\nexport default function Alert(props) {\r\n const capitalize = (str)=>{\r\n    const lower = str.toLowerCase();\r\n    return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n }\r\n  return (\r\n    // if below statement runs(true) the another will run\r\n    props.alert &&\r\n    <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n     <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      {/* <button\r\n        // type=\"button\"\r\n        // class=\"btn-close\"\r\n        // data-bs-dismiss=\"alert\"\r\n        // aria-label=\"Close\"\r\n      >\r\n      </button> */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\nimport \"./App.css\";\nimport AboutUs from \"./Component/AboutUs\";\nimport Navbar from \"./Component/Navbar\";\nimport TextForm from \"./Component/TextForm\";\nimport Alert from \"./Component/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Light or Dark mode\n  const [currMode, setCurrMode] = useState('Enable Dark Mode'); // Mode toggle text\n  const [alert, setAlert] = useState(null);\n  const [activeTab, setActiveTab] = useState('TextUtils'); // Default tab\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      setCurrMode('Enable Light Mode');\n      showAlert(\"Dark Mode has been Enabled.\", \"primary\");\n      document.title = \"TextUtils: Dark Mode\";\n    } else {\n      setMode('light');\n      setCurrMode('Enable Dark Mode');\n      showAlert(\"Light Mode has been Enabled.\", \"success\");\n      document.title = \"TextUtils: Light Mode\";\n    }\n  };\n\n  const renderTab = () => {\n    switch (activeTab) {\n      case 'TextUtils':\n        return <TextForm title=\"Enter Text to Analyze\" heading=\"Enter Text to Analyze\" mode={mode} showAlert={showAlert} />;\n      case 'AboutUs':\n        return <AboutUs />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <>\n      <Navbar\n        title=\"TextUtils\"\n        aboutText=\"Explore TextUtils\"\n        onNavigate={setActiveTab}\n        mode={mode}\n        toggleMode={toggleMode}\n        currMode={currMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {renderTab()}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <BrowserRouter>\n  <App />\n</BrowserRouter>\n);\n\n/*\nWhere id is root put app component(App.js)\n\nconst root = ReactDOM.createRoot(document.getElementById('root));\nReactDOM.render(\n<React.StrictMode>\n  <App/>\n</React.StrictMode>\ndocument.getElementById(\"root\");\n)\n*/\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}